// Importaci√≥n de m√≥dulos necesarios
const { exec } = require('child_process'); // M√≥dulo para ejecutar comandos del sistema
const util = require('util'); // Utilidades de Node.js
const execPromise = util.promisify(exec); // Convertir exec a versi√≥n con promesas

// ==============================================
// FUNCI√ìN PRINCIPAL - EJECUCI√ìN DE PROCESOS
// ==============================================
/**
 * @function runParallelProcesses
 * @description Ejecuta un flujo automatizado en 3 fases:
 * 1. Descarga de datos iniciales
 * 2. Procesamiento paralelo de datos
 * 3. Subida de resultados
 */
async function runParallelProcesses() {
  try {
    // Mensaje inicial
    console.log('üöÄ Iniciando proceso automatizado...\n');

    // ------------------------------------------
    // FASE 1: DESCARGAR DATOS INICIALES
    // ------------------------------------------
    console.log('‚¨áÔ∏è Descargando datos de Google Sheets...');
    await execPromise('node descargar.js'); // Ejecuta el script de descarga
    console.log('‚úÖ Descarga completada\n');

    // ------------------------------------------
    // FASE 2: PROCESAMIENTO PARALELO
    // ------------------------------------------
    console.log('üîÑ Procesando datos en paralelo...');
    const startTime = Date.now(); // Marca de tiempo inicial
    
    // Array de promesas que representan los procesos paralelos
    const processes = [
      // Proceso 1: Ejecuta index.js y muestra mensaje al completar
      execPromise('node index.js')
        .then(() => console.log('‚úÖ index.js completado'))
        .catch(err => {
          console.error('‚ùå Error en index.js:', err.message);
          throw err; // Relanza el error para detener el flujo
        }),
      
      // Proceso 2: Ejecuta index2.js y muestra mensaje al completar
      execPromise('node index2.js')
        .then(() => console.log('‚úÖ index2.js completado'))
        .catch(err => {
          console.error('‚ùå Error en index2.js:', err.message);
          throw err;
        }),
      
      // Proceso 3: Ejecuta index3.js y muestra mensaje al completar
      execPromise('node index3.js')
        .then(() => console.log('‚úÖ index3.js completado'))
        .catch(err => {
          console.error('‚ùå Error en index3.js:', err.message);
          throw err;
        })
    ];
    
    // Espera a que todos los procesos terminen (o alguno falle)
    await Promise.all(processes);
    
    // Calcula y muestra el tiempo total de procesamiento
    const endTime = Date.now();
    console.log(`\n‚úÖ Todos los procesos completados en ${(endTime - startTime)/1000} segundos\n`);

    // ------------------------------------------
    // FASE 3: SUBIR RESULTADOS
    // ------------------------------------------
    console.log('‚¨ÜÔ∏è Subiendo resultados a Google Sheets...');
    await execPromise('node subir.js'); // Ejecuta el script de subida
    console.log('‚úÖ Carga de resultados completada\n');

    // Mensaje final de √©xito
    console.log('üéâ ¬°Proceso completado exitosamente!');
    console.log(`üîó Accede a tu archivo: https://docs.google.com/spreadsheets/d/1lTkvAMSecN18USpqeDePy-WFgFUtisRewSYwaNCKZbo/edit`);

  } catch (error) {
    // ------------------------------------------
    // MANEJO DE ERRORES
    // ------------------------------------------
    console.error('‚ùå Error en el proceso automatizado:', error.message);
    if (error.stderr) {
      console.error('Detalles:', error.stderr); // Muestra salida de error del comando
    }
    process.exit(1); // Termina el proceso con c√≥digo de error
  }
}

// Ejecuta la funci√≥n principal
runParallelProcesses();

// ==============================================
// DETALLES ADICIONALES
// ==============================================
/*
Caracter√≠sticas clave:
1. Ejecuci√≥n secuencial de las fases principales
2. Procesamiento paralelo de los scripts intermedios
3. Medici√≥n precisa del tiempo de ejecuci√≥n
4. Manejo robusto de errores
5. Feedback claro del progreso

Mejoras potenciales:
1. Agregar timeouts para cada proceso
2. Implementar reintentos autom√°ticos
3. Agregar validaci√≥n de resultados entre fases
4. Configuraci√≥n externa de los scripts a ejecutar
5. Logging m√°s detallado en archivo

Consideraciones:
- Los scripts (descargar.js, index.js, etc.) deben estar en el mismo directorio
- Requiere Node.js instalado
- Cada script debe manejar sus propios errores internos
- El paralelismo puede consumir muchos recursos seg√∫n la complejidad de los scripts
*/
